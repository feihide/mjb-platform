module.exports = function(model, memcache, cacheTable) {
  function err(_error) {
    return {
      code: 400,
      error: JSON.stringify(_error)
    };
  }

  function out(result) {
    return {
      code: 200,
      data: result
    };
  }
  var date = new Date();


  return {
    findAll: function*(next) {
      yield next;
      var error,
        result;
      try {
        var conditions = {};
        var query = this.request.query;

        if (query.conditions) {
          conditions = JSON.parse(query.conditions);
        }

        var num = yield model.find(conditions).count();
        if (num) {
          var builder = model.find(conditions);

          ['limit', 'skip', 'sort'].forEach(function(key) {
            if (query[key]) {
              if (key != 'sort') {
                builder[key](parseInt(query[key]))
              } else {
                builder[key](query[key])
              }
            }
          })
          result = yield builder.exec();
        } else {
          result = []
        }
        return this.body = out({
          list: result,
          num: num
        })
      } catch (_error) {
        error = _error;
        return this.body = err(_error)
      }
    },
    findById: function*(next) {
      yield next;
      var error,
        result;
      try {
        result = yield model.findById(this.params.id).exec();
        return this.body = out(result)
      } catch (_error) {
        error = _error;
        return this.body = err(_error)
      }
    },
    deleteById: function*(next) {
      yield next;
      var error,
        result;
      try {
        result = yield model.findByIdAndRemove(this.params.id).exec();
        if (cacheTable.indexOf(model.modelName) != -1) {
          yield memcache.destroy(model.modelName + '_' + this.params.id);
        }
        return this.body = out(result)

      } catch (_error) {
        return this.body = out(result)

        error = _error;
        return this.body = err(_error)
      }
    },
    replaceById: function*(next) {
      yield next;
      var error,
        newDocument,
        result;
      try {
        yield model.findByIdAndRemove(this.params.id).exec();
        newDocument = this.request.body;
        newDocument._id = this.params.id;
        result = yield model.create(newDocument);
        return this.body = out(result)
      } catch (_error) {
        error = _error;
        return this.body = err(_error)
      }
    },
    updateById: function*(next) {
      yield next;
      var error,
        result;
      try {
        this.request.body.utime = date.getTime()
        result = yield model.findByIdAndUpdate(this.params.id, {
          $set: this.request.body
        }, {
          new: true
        }).exec();
        if (cacheTable.indexOf(model.modelName) != -1) {
          yield memcache.destroy(model.modelName + '_' + this.params.id);
        }
        return this.body = out(result)

      } catch (_error) {
        return this.body = out(result)
        error = _error;
        return this.body = err(_error)
      }
    },
    create: function*(next) {
      yield next;
      var error,
        result;
      try {
        this.request.body.ctime = this.request.body.utime = date.getTime()
        result = yield model.create(this.request.body);
        this.status = 201;
        return this.body = out(result)
      } catch (_error) {
        error = _error;
        return this.body = err(_error)
      }
    }
  };
};
