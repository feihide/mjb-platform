/**
 * Copyright 2013-present NightWorld.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var error = require('./error'),
  runner = require('./runner'),
  isLoad = 0;
module.exports = Authorise;

/**
 * This is the function order used by the runner
 *
 * @type {Array}
 */
var fns = [
  getBearerToken,
  checkToken,
  getResource
];

/**
 * Authorise
 *
 * @param {Object}   config Instance of OAuth object
 * @param {Object}   req
 * @param {Object}   res
 * @param {Function} next
 */
function Authorise(config, req, next) {
  this.config = config;
  this.model = config.model;
  this.req = req;

  runner(fns, this, next);
}

/**
 * Get bearer token
 *
 * Extract token from request according to RFC6750
 *
 * @param  {Function} done
 * @this   OAuth
 */
function getBearerToken(done) {
  var headerToken = this.req.get('Authorization'),
    getToken = this.req.query.access_token,
    postToken = this.req.body ? this.req.body.access_token : undefined;
  // console.log(headerToken, '|', getToken, '|', postToken);
  // Check exactly one method was used
  var methodsUsed = (headerToken !== undefined && headerToken !== '') + (getToken !== undefined) +
    (postToken !== undefined);

  if (methodsUsed > 1) {
    return done(error('invalid_request',
      'Only one method may be used to authenticate at a time (Auth header,  ' +
      'GET or POST).'));
  } else if (methodsUsed === 0) {
    return done(error('invalid_request', 'The access token was not found'));
  }

  // Header: http://tools.ietf.org/html/rfc6750#section-2.1
  if (headerToken) {
    var matches = headerToken.match(/Bearer\s(\S+)/);

    if (!matches) {
      return done(error('invalid_request', 'Malformed auth header'));
    }

    headerToken = matches[1];
  }

  // POST: http://tools.ietf.org/html/rfc6750#section-2.2
  if (postToken) {
    if (this.req.method === 'GET') {
      return done(error('invalid_request',
        'Method cannot be GET When putting the token in the body.'));
    }

    if (!this.req.is('application/x-www-form-urlencoded')) {
      return done(error('invalid_request', 'When putting the token in the ' +
        'body, content type must be application/x-www-form-urlencoded.'));
    }
  }

  this.bearerToken = headerToken || postToken || getToken;
  done();
}

/**
 * Check token
 *
 * Check it against model, ensure it's not expired
 * @param  {Function} done
 * @this   OAuth
 */
function checkToken(done) {
  var self = this;
  this.model.getAccessToken(this.bearerToken, function(err, token) {
    if (err) return done(error('server_error', false, err));

    if (!token) {
      return done(error('invalid_token',
        'The access token provided is invalid.'));
    }

    if (token.expires !== null &&
      (!token.expires || token.expires < new Date())) {
      return done(error('invalid_token',
        'The access token provided has expired.'));
    }
    //验证该角色是否有权限访问该操作
    self.model.getClientInfo(
      token.clientId
      , function(err, data) {
        if (err) return done(error('server_error', false, err));
        if (!data) {
          return done(error('invalid_client',
            'clientId not exits'));
        }
        if (data.role != self.req.url.split('/')[2]) {
          return done(error('invalid_role',
            'The role does not have permission to use this API '));
        }

        // Expose params
        self.req.oauth = {
          bearerToken: token
        };
        self.req.user = token.clientId

        if (self.req.method == 'POST') {
          self.req.body.creator = self.req.user
        }
        self.req.query.cu = self.req.user

        var target = self.req.query.targetId ? self.req.query.targetId : self.req.body.targetId

        self.req.body.requestTargetUri = []
        //对target验证
        if (target) {
          target.split(',').forEach(function(target) {
            // console.log(target)
            self.model.getClientInfo(
              target
              , function(err, targetData) {
                if (err) return done(error('server_error', false, err));

                if (!targetData) {
                  return done(error('invalid_client',
                    'targetId not exits'));
                }
                var wrong = 1;
                switch (data.role) {
                  case 'demand':
                    if (targetData.role == 'dispatch') {
                      wrong = 0;
                    }
                    break;
                  case 'service':
                    if (targetData.role == 'dispatch') {
                      wrong = 0;
                    }
                    break;
                  case 'supply':
                    if (targetData.role == 'dispatch') {
                      wrong = 0;
                    }
                    break;
                  case 'dispatch':
                    wrong = 0;
                    break;
                }
                if (wrong) {
                  return done(error('invalid_target',
                    'The role does not have permission to use this target'));
                } else {
                  if (!targetData.requestUri) {
                    return done(error('target_requestUri_null',
                      'No requestUri can use to access'));
                  } else {
                    self.req.body.requestTargetUri.push(targetData.requestUri)
                  }
                }

              })
          })
          done();

        } else {
          done();
        }
      })

  });
}


function getResource(done) {
  var self = this;
  //解决不重复加载
  if (!isLoad || 1) {
    this.model.getResource(function(err, data) {
      // var data = JSON.parse(data.attr)
      self.req.body.model = data
      isLoad = 1;
      done();
    })
  } else {
    done();
  }
}
